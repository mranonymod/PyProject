from DBconnect import *
#from icecream import ic

class db:
    def __init__(self,username):
        self.username = username
        self.db=mydb
    def check(self,Service):
        """checks whether an account/service is already registered in the database if not it is entered and then checks whether the user already has a corresponding password for it

        Args:
            Service (string): Account/Service whose password is to be stored

        Returns:
            Boolean: True if Service doesn't exist in db or exists in db but not registered with user and vice versa
        """
        self.cur2=self.db.cursor()
        self.service=Service
        self.cur2.execute('''(SELECT Services FROM ServicesR WHERE Services=%s)''',(self.service,))
        self.check1=self.cur2.fetchall()
        self.cur2.close()
        self.cur4=self.db.cursor()
        self.cur4.execute('''SELECT Service FROM Passwords WHERE Service=%s AND Username=%s''',(self.service,self.username))
        self.check2=self.cur4.fetchall()
        self.cur4.close()
        if(self.check1):
            if(self.check2):
                #ic()
                return False
            else:
                #ic()
                return True
        else:
            self.inService=self.db.cursor()
            self.inService.execute('''INSERT INTO ServicesR(Services) VALUES(%s)''',(self.service,))
            self.db.commit()
            self.inService.close()
            return True
        self.db.close()
   
    def add(self,AccUserName,EPassword,Service,SharedID):
        """stores password and other details

        Args:
            AccUserName (string): Username of the Account/Service (Not the Manager Account Username)
            EPassword (string): Password of the account/service
            Service (string): Name of the Account/Service 
            SharedID (string): SharedID (autogenerated and encrypted)

        Returns:
            Boolean: True if storing in db was successful else False
        """
        self.AccUserName = AccUserName
        self.EPassword = EPassword
        self.Service = Service
        self.shdid=SharedID
        if(self.check(self.Service)):
            self.cur3=self.db.cursor()
            self.cur3.execute('''INSERT INTO Passwords(Username,AccUserName,Service,Passwords,SharedID) VALUES(%s,%s,%s,%s,%s)''',(self.username,self.AccUserName,self.Service,self.EPassword,self.shdid))
            self.db.commit()
            return True
        else:
            return False
        self.db.close()
    
    def getServicesU(self):
        """gets the services which user has registered in order to share those passwords
           for the dropdownlist

        Returns:
            Tuple/List: Names of Services which user has registerd a password for
        """
        self.db=mydb
        self.cur1=self.db.cursor()
        self.cur1.execute('''SELECT Service from Passwords WHERE Username = %s''',(self.username,))
        self.services=self.cur1.fetchall()
        return self.services
        self.db.close()
    def getServices(self):
        """gets the services which are already registered in database
           for the dropdownlist

        Returns:
            Tuple/List: Names of Services/accouunts stored in db
        """
        self.db=mydb
        self.cur5=self.db.cursor()
        self.cur5.execute('''SELECT Services from ServicesR''')
        self.services=self.cur5.fetchall()
        self.cur5.close()
        return self.services
        self.db.close()
    def getkey(self):
        """[summary]

        Returns:
            string: SHA256 Hashed password key of the user account
        """
        self.db=mydb
        self.cur=self.db.cursor()
        self.cur.execute('''SELECT Password from Users WHERE Username = %s''',(self.username,))
        self.result=self.cur.fetchall()[0][0]
        return self.result
        self.db.close()

# extract , is not an error (TUPLES ARE PASSED AS ARGUMENTS)
#[m][n] to get a specific cell from fetched data
'''A=db("bruh")
print(A.check("WIFI"))'''